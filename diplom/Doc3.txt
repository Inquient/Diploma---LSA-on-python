2	Техническое задание

2.1	 Требования к структуре и функционированию системы.

Проектируемая система должна отвечать целому ряду характеристик. Необходимо спроектировать приложение таким образом, чтобы оно могло обеспечить выполнение поставленной задачи и при этом могло служить основой для других приложений. В связи с этим было принято решение сконцентрировать усилия на разработке работающей системы и обеспечении её встраиваемости в другие проекты.
Архитектура проектируемого приложения является одноуровневой. В самом приложении предусмотрен ряд подсистем, оформленных в виде отдельных статических классов, что позволяет использовать как весь функционал в целом, так и отдельные методы. Сама программа оформлена в виде скрипта с консольным интерфейсом. В дальнейшем планируется использование программы в качестве пакета при разработке других приложений.

Рисунок 2.1 – схема взаимодействия подсистем приложения
Как показано на рисунке (рисунок 2.1), весь процесс работы приложения представляет собой последовательную обработку входного сигнала различными подсистемами. Из них следует выделять:
1)	Подсистему первичной обработки текста.
2)	Подсистему семантического анализа.
3)	Подсистему интерпретации результатов.
4)	Подсистему вывода результатов анализа.
Каждая подсистема выполнят свою промежуточную задачу в процессе латентно-семантического анализа.
Подсистема предобработки текста осуществляет подготовку входных данных к анализу. Она разбивает текст на части, если это необходимо, удаляет слова, не несущие смысловой нагрузки и т.п. Итогом её работы служит частотная матрица индексируемых слов.
Подсистема семантического анализа является основной. Она производит сингулярное разложение матрицы, что позволяет получить весовые коэффициенты, позволяющие выделить скрытые связи между термами и документами в исследуемом тексте.
Подсистема интерпретации итоговых данных производит сопоставление результатов анализа. В зависимости от типа входных данных принимается решение о соответствии выделенных тем тому или иному документу, или группы тем – группе документов.
Подсистема визуализации результатов служит для вывода полученной информации в понятной для пользователя манере. Она строит график и таблицу по результатам анализа. Это позволяет облегчить интерпретацию итоговых данных пользователем.

2.2	 Позиционирование продукта

Приложение, которое должно быть разработано в ходе дипломной работы представляет собой скрипт на языке python. Оно может использоваться как самостоятельная программа для определения тематики текстов, так и как подключаемая библиотека для решения задач связанных с обработкой текстовых данных и семантического анализа. Схема функционирования программы представлена в виде диаграммы.

Рисунок 2.2 – общая функциональная схема программы

Итоговый программный продукт предназначен для решения как исследовательских, так и прикладных задач, что накладывает специфические ограничения на требования к пользователям и правила эксплуатации.

2.3	 Требования к пользовательским интерфейсам

Поскольку приложение создаётся прежде всего в качестве инструмента для латентно-семантического анализа, то интерфейс приложения решено было сделать консольным. Чтобы провести анализ текста, пользователь в командной строке должен ввести команду, указав путь к файлу с исходными данными и параметры обработки. Когда выполнение программы завершиться на экран будет выведен график с результатами эксперимента, а в папку назначения записан файл с сопутствующей информацией о темах исследуемых документов.
Ниже приведён пример консольной команды с указанием всех возможных параметров.

TextAnalizer.py –s document.txt –d C:\result –e 20

Здесь скрипту передаётся следующий набор параметров:
-s – Параметр, указывающий путь к документу или каталогу с документами, который необходимо исследовать;
-d – Параметр, указывающий путь к папке, в которую будут помещены выходные данные;
-e – Параметр, указывающий, что для обработки текущих документов должно использоваться шифрование. В качестве значения принимает ключ шифрования.
Кроме того, в процессе разработки могут быть добавлены дополнительные параметры. В этом случае, их полный список буде включён в приложения к данной работе.

2.4	 Требования к аппаратным и программным интерфейсам.

Данное приложение не требует дополнительных аппаратных средств или коммуникационных интерфейсов для обеспечения своей корректной работы. Компьютер, на котором планируется использовать программу должен обладать лишь стандартным набором устройств ввода-вывода.
Также следует помнить, что для правильной работы программы необходимо иметь систему следующей базовой конфигурации:
•	Операционная система: Windows, Linux.
•	Процессор: 1.0 ГГц.
•	Оперативная память: 512 Мб.
•	Свободное место на жестком диске: 1Мб – для приложения, 300Мб – для интерпретатора и подключаемых библиотек.
•	Наличие графического ускорителя не требуется.
Требования к программным интерфейсам более жёсткие. Как видно из списка аппаратных требований приложение поддерживает определённую кроссплатформенность. Это достигается за счёт использования языка python и означает также, что интерпретатор python должен быть установлен на целевом устройстве. Рекомендуемая версия интерпретатора – не менее 3.6. Также необходимо обеспечить взаимодействие приложение с библиотеками Numpy и MatPlotLib, которые не входят в стандартный пакет python, так что их необходимо будет установить отдельно.

2.5	 Требования к пользователям продукта.

Поскольку приложение предназначено для выполнения задач исследовательского характера и, к тому же имеет только консольный интерфейс, то требования к пользователям не ограничиваются базовыми знаниями ОС Windows.
Для использования программы достаточно знать основные команды командной строки Windows или Bash, если вы работаете с Linux. Установка интерпретатора может потребовать более глубоких знаний в этих областях, но в целом не должна вызвать осложнений даже в случаи их отсутствия.
Специфические задачи, решаемые данным программным продуктом, определяют область его применения. Она ограничена определённым набором исследовательских и прикладных задач, следовательно, пользователь приложения должен иметь некоторое представление о предметной области данной работы.
Понизить порог вхождения в программу могло бы «Руководство пользователя», подготовка которого серьёзно облегчило бы взаимодействие с продуктом. Однако, в силу того, что приложение планируется развивать и дальше, создание такого документа пока не имеет смысла.


2.6	 Требования к безопасности

 Поскольку приложение может быть использовано для работы с большим количеством документов, то, в целях обеспечения безопасности, оно должно поддерживать основные принципы защищённого документооборота. То есть, приложение должно поддерживать работу с зашифрованными документами не нарушая их конфиденциальности, а также обеспечивать сохранение результатов своей работы в защищённом виде.
С целью обеспечения безопасности в проект должны быть внедрены соответствующие пакеты и библиотеки.
Использование самого приложения в качестве инструмента проверки подлинности документов уже предусмотрено. Это легко осуществить, так как программа может применяться как в виде подключаемой библиотеки в других проектах, так и автономно.

2.7	 Функции продукта

Основные функциональные возможности продукта:
1)	Определение темы текстов и их наборов с помощью латентно-семантического анализа.
2)	Отображение результатов анализа графически и в текстовом виде.
3)	Обеспечение конфиденциальности при работе с документами.
4)	Возможность быть использованной как в виде отдельного приложения, так и виде подключаемой библиотеки.
5)	Обеспечение защищённого документооборота.

2.8	 Ограничения
•	Продукт поддерживает обработку текстов только на русском языке. Поддержка английского языка интегрирована, но результат не гарантируется.
•	Текстовые файлы, с которыми работает программа, должны иметь формат .txt.
•	Кодировка текстовых файлов должна быть в формате «utf-8», во избежание сложностей при смене ОС.
•	Продукт не будет корректно работать, если заказчик будет вручную изменять или перемещать файлы приложения.

2.9	 Сценарии использования продукта

Здесь продемонстрирован основной сценарии использования данного программного продукта.
Сценарий «Анализ текста»:
1)	Пользователь открывает окно консоли.
2)	Пользователь вводит команду, указывая файлы, предназначенные для анализа, папку назначения и дополнительные параметры, после чего запускает команду на выполнение.
3)	Программа в течении некоторого времени осуществляет обработку входных данных.
4)	После завершения обработки программа формирует выходные данные – график и сопутствующую информацию – и записывает из на диск в папку назначения.
5)	На экране появляется окно с графиком, отражающим структуру скрытых зависимостей в исследуемом тексте.
6)	Также выводится список термов, наиболее полно отражающих тематику исследуемого документа.
7)	При необходимости пользователь производит проверку результатов на основании выходных данных.
8)	Программа завершает свою работу.
